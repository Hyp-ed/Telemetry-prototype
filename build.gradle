apply plugin: 'java'
apply plugin: 'cpp'
apply plugin: 'application'

// specify application entry point (which main method to run)
mainClassName = 'server.Main'

// run this task to start the c++ client
task runClient(type: Exec) {
    commandLine './build/exe/main/main'
}

// honestly not really sure how this works, but basically this is for compiling the c++ stuff
model {
    components {
        main(NativeExecutableSpec)
    }

    binaries {
        all {
            if (toolChain in Clang) {
                // compiler flags
                def incs = 'pkg-config --cflags protobuf'.execute()
                    incs.waitFor()
                    def incsFlags = incs.in.text.trim()
                    cppCompiler.args "-std=c++11", "-g"
                    cppCompiler.args.addAll(incsFlags.tokenize(' '))

                //linker flags
                def libs = 'pkg-config --libs protobuf'.execute()
                    libs.waitFor()
                    def libsFlags = libs.in.text.trim()
                    linker.args.addAll(libsFlags.tokenize(' '))
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.protobuf:protobuf-java:3.6.1'
}

// idk why this doesn't happen automatically, but here we specify some manifest stuff in our jar
jar {
    manifest.attributes "Main-Class": "server.Main"
}

// for C++
// protoc --cpp_out=src/main/cpp/types/ src/main/proto_types/message.proto

// for Java
// protoc --java_out=src/main/java/server/ src/main/proto_types/message.proto
